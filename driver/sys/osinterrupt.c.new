#include <ibsys.h>


/*
 * There is a Problem with Linux Semaphores: 
 *      - enabling Interrupts
 *      - call to down()
 *
 * could produce spurious segmentation faults, because up() is called
 * within this interrupt just before down() has been called
 * then wait will be called with empty queue.
 *
 * I worked over this code again to protect from such conditions
 * hope it works. :-)
 *
 *
 *
 */

extern uint8 ibirq;

#if USEINTS
/*
 * GPIB interrupt service routine -- fast and simple
 */
IBLCL void ibintr(int irq)
{
int s;

#if DEBUG
	if (dbgMask & DBG_INTR)
	        printk("GPIB INTERRUPT! semaphore id = %d\n", espsemid.count);
#endif

#ifdef NIPCIIa
        /* reset shared interrupt circuit */
	outb(0xff , ( 0x2f0 | ibirq ) );
#endif
	    up(&espsemid); /* wake up sleeping process */
}


/*
 * Wait for GPIB or timer interrupt.  Semaphore will be posted by
 * either ibintr or ibtmintr.
 */



IBLCL osWaitForInt(imr3mask)
int imr3mask;
{
        struct wait_queue wait = {current, NULL}; /*@*/

	DBGin("osWaitForInt");
	if (espsemid.count <= 0) {
	/*
	 *	If semaphore not already available, enable
	 *	requested interrupts and wait until it is...
	 */

	  espsemid.count = 1;
          down(&espsemid); /* spurious interrups calling up() while enable irq's ? */

          /* now it's time to enable board interrupts */

	  osMaskIRQ(imr3mask);

	  /* now push process to sleep */
	  down(&espsemid);
	  up(&espsemid);        

          osUnmaskIRQ(imr3mask);
	}
        else	{ 
	  espsemid.count = 0;
          espsemid.wait  = NULL;
	}
	DBGout();
}
#endif


/* mask and unmask GPIB chip interrupts */

static int IRQ_Mask = 0;  /* global variable that holds the interrupt mask register */

void osMaskIRQ(int mask)
{
   DBGin("osMaskIRQ");

   IRQ_Mask |= mask;
   DBGprint(DBG_DATA, ("IRQ_Mask=0x%x  ", IRQ_Mask));		
#ifdef NIAT
   GPIBout(imr3, IRQ_Mask);
#endif
#ifdef NIPCII
   GPIBout(imr2, IRQ_Mask);
#endif

DBGout();
}

void osUnmaskIRQ(int mask)
{
DBGin("osUnmaskIRQ");

   IRQ_Mask &= ~mask;
   DBGprint(DBG_DATA, ("IRQ_Mask=0x%x  ", IRQ_Mask));		
#ifdef NIAT
   GPIBout(imr3, IRQ_Mask);
#endif
#ifdef NIPCII
   GPIBout(imr2, IRQ_Mask);
#endif


DBGout();
}
